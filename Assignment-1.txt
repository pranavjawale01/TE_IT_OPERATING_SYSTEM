Assignment No.1-A

Theory : 
1. echo :

* echo "  "
	This command will print the text inside "  "
             student@student:~$ echo "Hello"
             Hello

* echo $x 
             This command will print the value stored inside the variable
             student@student:~$ x=10
             student@student:~$ echo $x
10
* echo -e
This command enables escape sequence characters
student@student:~$ echo -e "Hello \nAll"
Hello 
All

* echo -E
This command disables escape sequence characters
student@student:~$ echo -E "Hello \nAll"
Hello \nAll

2. cat :

* cat file.txt
This command prints the content inside the file
student@student:~$ cat abc.txt
A "Hello, World!" program is generally a computer program that ignores any input, and outputs or displays a message similar to "Hello, World!".


* cat > file.txt
This command overwrite the content in the file
student@student:~$ cat > pqr.txt
Hello World provides coliving, student housing, coworking, social spaces and natural habitats to those exploring the evolution of humanity through positive
^Z
[1]+  Stopped                 cat > pqr.txt
student@student:~$ cat pqr.txt
Hello World provides coliving, student housing, coworking, social spaces and natural habitats to those exploring the evolution of humanity through positive

* cat >> file.txt
This command append the content in the file
student@student:~$ cat >> pqr.txt
It's a quick way to get a peek at what working in a coding language will be like and whether you'd enjoy the syntax
^Z
[2]+  Stopped                 cat >> pqr.txt
student@student:~$ cat pqr.txt
Hello World provides coliving, student housing, coworking, social spaces and natural habitats to those exploring the evolution of humanity through positive
It's a quick way to get a peek at what working in a coding language will be like and whether you'd enjoy the syntax
 
* cat file1.txt  file2.txt > file3.txt
Using this command we can overwrite the content in the new file from old file's
student@student:~$ cat xyz.txt 
student@student:~$ cat abc.txt pqr.txt > xyz.txt
student@student:~$ cat xyz.txt
A "Hello, World!" program is generally a computer program that ignores any input, and outputs or displays a message similar to "Hello, World!".
Hello World provides coliving, student housing, coworking, social spaces and natural habitats to those exploring the evolution of humanity through positive
It's a quick way to get a peek at what working in a coding language will be like and whether you'd enjoy the syntax

3. touch

* touch file.txt
This command is used to create the single or multiple files
student@student:~$ touch abc.txt pqr.txt xyz.txt
student@student:~$ ls
 abc.txt              google-cloud-sdk        Public
 Desktop             'Google cloud SDK.odt'   snap
 Documents            Linux                   Templates
 Downloads            Music                   Videos
 eclipse-workspace3   Pictures                xyz.txt
 glfw-3.3.8           pqr.txt

4. cal

* cal
	Using cal command it will display the calendar of current month
student@student:~$ cal
     July 2023        
Su Mo Tu We Th Fr Sa  
                   1  
 2  3  4  5  6  7  8  
 9 10 11 12 13 14 15  
16 17 18 19 20 21 22  
30 4 25 26 27 28 29  
30 31                

* cal -m 9 2023 
using this command it will display the calendar for specific month and year
student@student:~$ cal -m 9 2023
   September 2023     
Su Mo Tu We Th Fr Sa  
                1  2  
 3  4  5  6  7  8  9  
10 11 12 13 14 15 16  
17 18 19 20 21 22 23  
24 25 26 27 28 29 30  

* cal 2024
This command will display entire calendar for that specific year

student@student:~$ cal 2024
                            			2024
      January               		February               		March          
	Su Mo Tu We Th Fr Sa  	Su Mo Tu We Th Fr Sa  	Su Mo Tu We Th Fr Sa  
    1  2  3  4  5  6                                                 1  2  3                                                1  2  
 7  8  9 10 11 12 13             4  5  6  7  8  9 10     3  4  5  6  7  8  9  
14 15 16 17 18 19 20            11 12 13 14 15 16 17    10 11 12 13 14 15 16  
21 22 23 24 25 26 27            18 19 20 21 22 23 24    17 18 19 20 21 22 23  
28 29 30 31                     25 26 27 28 29          24 25 26 27 28 29 30  
                                                                                                           31                    

       April                  		May                   		June          
Su Mo Tu We Th Fr Sa 		Su Mo Tu We Th Fr Sa  	Su Mo Tu We Th Fr Sa  
    1  2  3  4  5  6            			         1  2  3  4                    		        1  
 7  8  9 10 11 12 13   		5  6  7  8  9 10 11     2  3  4  5  6  7  8  
14 15 16 17 18 19 20  		12 13 14 15 16 17 18   	9 10 11 12 13 14 15  
21 22 23 24 25 26 27  		19 20 21 22 23 24 25  		16 17 18 19 20 21 22  
28 29 30              		26 27 28 29 30 31		23 24 25 26 27 28 29  
                                            					30                    

        July                		 August              		September        
Su Mo Tu We Th Fr Sa  		Su Mo Tu We Th Fr Sa  	Su Mo Tu We Th Fr Sa  
      1  2  3  4  5  6                       1  2  3   	1  2  3  4  5  6  7  
 7  8  9 10 11 12 13  		 4  5  6  7  8  9 10   	8  9 10 11 12 13 14  
14 15 16 17 18 19 20  		11 12 13 14 15 16 17  	15 16 17 18 19 20 21  
21 22 23 24 25 26 27  		18 19 20 21 22 23 24  	22 23 24 25 26 27 28  
28 29 30 31           		25 26 27 28 29 30 31  	29 30                 
                                                                  

      October               		November             		December        
Su Mo Tu We Th Fr Sa  		Su Mo Tu We Th Fr Sa  	Su Mo Tu We Th Fr Sa  
       1  2  3  4  5                           1  2   	1  2  3  4  5  6  7  
 6  7  8  9 10 11 12   		3  4  5  6  7  8  9   	8  9 10 11 12 13 14  
13 14 15 16 17 18 19  		10 11 12 13 14 15 16  	15 16 17 18 19 20 21  
20 21 22 23 24 25 26  		17 18 19 20 21 22 23  	22 23 24 25 26 27 28  
27 28 29 30 31        		24 25 26 27 28 29 30  	29 30 31              
 
* cal -m 1
This command will display specified month of current year

student@student:~$ cal -m 1
    January 2023      
Su Mo Tu We Th Fr Sa  
 1  2  3  4  5  6  7  
 8  9 10 11 12 13 14  
15 16 17 18 19 20 21  
22 23 24 25 26 27 28  
29 30 31              


5. Date

* date +%D
It will print the current date in mm/dd/yyyy format
student@student:~$ date +%D
07/20/23

* date +%T
It will print the current time in h:m:s format
student@student:~$ date +%T
15:02:06

* date +%m
It will print the current month
student@student:~$ date +%m
07

* date +%h
It will print the name of current month
student@student:~$ date +%h
Jul

* date +"%h %m"
This will print the abbreviated month name followed by the current month
student@student:~$ date +"%h %m"
Jul 07

* date +%d	
It will print the current day of the month
student@student:~$ date +%d
20

* date +%y
It will print the last two digits of the current year
student@student:~$ date +%y
23

* date +"%d %m %y"
This will display the current date in the format "day month year
student@student:~$ date +"%d %m %y"
20 07 23

* date +"%H %M %S"	
It will print the current time in the format "hour minute second"
student@student:~$ date +"%H %M %S"
15 04 14
student@student:~$ date +"%H %M %S"
15 04 22

* date
This will display the current date and time in the default format
student@student:~$ date
Thursday 20 July 2023 03:04:44 PM IST

6. mkdir

* mkdir foldername
It will create single or multiple folder in current working directory
student@student:~$ mkdir abc pqr xyz
student@student:~$ ls
 abc            	eclipse-workspace3      	Pictures    	Videos
 abc.txt       	 glfw-3.3.8              		pqr       		xyz
 Assignment-1   google-cloud-sdk        		pqr.txt     	xyz.txt
 Desktop      	 'Google cloud SDK.odt'   	Public
 Documents      	Linux                   		snap
 Downloads      Music                  		Templates

* mkdir   -p  folder1/folder2/folder3
This command will create the parent folder and will create child folder inside it
student@student:~$ mkdir -p abc/pqr/xyz

* mkdir -m 742 efg
This command will create the folder with the mode(read/write/execute) to the user, group and other.
For Read - 4
For Write - 2
For Execute - 1
student@student:~$ mkdir -m 742 efg
student@student:~$ ls -l
drwxr---w-  2 student student  4096 Jul 20 15:23  efg

7. rmdir

* rmdir folder1
This command will remove the folder in the current working directory
student@student:~$ rmdir pqr xyz
student@student:~$ ls
 abc           	 Downloads              	 Linux     	 snap
 abc.txt        	eclipse-workspace3      Music      	Templates
 Assignment-1   glfw-3.3.8              	Pictures   	Videos
 Desktop        	google-cloud-sdk        	pqr.txt   	 xyz.txt
 Documents     'Google cloud SDK.odt'   Public
* rmdir -p folder1/folder2/folder3
This command will first delete the child folder from bottom and finally it will delete parent folder
student@student:~$ cd abc
student@student:~/abc$ cd pqr
student@student:~/abc/pqr$ cd xyz
student@student:~/abc/pqr/xyz$ rmdir -p abc/pqr/xyz
rmdir: failed to remove 'abc/pqr/xyz': No such file or directory
student@student:~/abc/pqr/xyz$ cd ..
student@student:~/abc/pqr$ cd ..
student@student:~/abc$ cd ..
student@student:~$ rmdir -p abc/pqr/xyz

8. rm
* rm file.txt
This command will remove file from system
student@student:~$ rm aaa.txt

* rm -i file.txt
This command will remove file after confirmation 
student@student:~$ rm -i file1.txt 
rm: remove regular file file1.txt? y

9. ls

* ls -l
This command will list the details including permissions to the file or dir.
student@student:~$ ls -l
total 108
drwxrwxr-x  3 student student  4096 Jul 20 15:20  abc
-rw-rw-r--  1 student student   144 Jul 20 15:13  abc.txt
-rw-rw-r--  1 student student  3281 Jul 20 15:13  Assignment-1
drwxr-xr-x  2 student student  4096 Jan 25 10:08  Desktop
drwxr-xr-x  2 student student  4096 Jun  6 14:39  Documents
drwxr-xr-x  2 student student  4096 May 31 11:41  Downloads
drwxrwxr-x  3 student student  4096 May 22 13:06  eclipse-workspace3
drwxr---w-  2 student student  4096 Jul 20 15:23  efg
drwxr-xr-x 11 student student  4096 Jan 23 09:42  glfw-3.3.8
drwxrwxr-x  9 student student  4096 Jan 25 09:27  google-cloud-sdk
-rw-rw-r--  1 student student 32445 Jan 23 16:35 'Google cloud SDK.odt'
drwxr-xr-x  2 student student  4096 Jan 23 09:13  Linux
drwxr-xr-x  2 student student  4096 Apr 21 08:45  Music
drwxr-xr-x  2 student student  4096 Jan 21 20:53  Pictures
-rw-rw-r--  1 student student   272 Jul 20 15:17  pqr.txt
drwxr-xr-x  2 student student  4096 Jan 21 20:53  Public
drwx------  7 student student  4096 May 18 11:12  snap
drwxr-xr-x  2 student student  4096 Jan 21 20:53  Templates
drwxr-xr-x  4 student student  4096 May 25 10:34  Videos
-rw-rw-r--  1 student student   416 Jul 20 15:18  xyz.txt

* ls -s
It print the allocated size of each file, in blocks
student@student:~$ ls -s
total 108
 4  abc.txt              	4  google-cloud-sdk        	4  Public
12  Assignment-1        	32 'Google cloud SDK.odt'   	4  snap
 4  Desktop              	0  ijk.txt                 		4  Templates
 4  Documents            	4  Linux                  		4  Videos
 4  Downloads            	4  Music                   		4  xyz.txt
 4  eclipse-workspace3   4  Pictures
 4  glfw-3.3.8          	 4  pqr.txt

* ls -t
It will display file in sorted manner by time, newest file will show first
student@student:~$ ls -t
 ijk.txt        Videos                  glfw-3.3.8
 Assignment-1   eclipse-workspace3      Linux
 xyz.txt        snap                    Pictures
 pqr.txt        Music                   Public
 abc.txt        Desktop                 Templates
 Documents      google-cloud-sdk
 Downloads     'Google cloud SDK.odt'

10. umask

* umask 0777
It is used to set the default permissions mask for newly created files and directories. It allows users to control the accessibility of these files and directories by masking certain permission bits.
For File
student@student:~$ umask 0401
student@student:~$ touch aaa.txt
student@student:~$ ls -l
--w-rw-rw-  1 student student     0 Jul 20 15:32  aaa.txt

For Directory
student@student:~$ umask 0777
student@student:~$ mkdir aaa
student@student:~$ ls -l
total 112
d---------  2 student student  4096 Jul 20 15:34  aaa

11. chmod

* chmod 777 filename
It used to change the permissions of files and directories, allowing users to control read, write, and execute access for different user,  groups, other.
student@student:~$ chmod 777 aaa
student@student:~$ ls -l
total 112
drwxrwxrwx  2 student student  4096 Jul 20 15:34  aaa

student@student:~$ chmod a-x xyz.txt 
student@student:~$ ls -l
-rw-rw-r--  1 student student   416 Jul 20 15:18  xyz.txt

student@student:~$ chmod a-rw xyz.txt 
student@student:~$ ls -l
----------  1 student student   416 Jul 20 15:18  xyz.txt

student@student:~$ chmod ugo+rwx xyz.txt
student@student:~$ ls -l
-rwxrwxrwx  1 student student   416 Jul 20 15:18  xyz.txt

student@student:~$ chmod g-wx,o-w xyz.txt
student@student:~$ ls -l
-rwxr--r-x  1 student student   416 Jul 20 15:18  xyz.txt

12. wc

* wc file.txt
This command used to display the word count of a file. It shows the number of lines, words, and characters in the specified file.
student@student:~$ wc xyz.txt
  3  68 416 xyz.txt

13. pipe

'|' is used to give output of first command as a input to the next command
student@student:~$ cat file1.txt | sort > file2.txt
apple
banana
grape
orange


14. ps

It is used to display information about currently running processes
student@student:~$ ps
    PID TTY          TIME CMD
   3938 pts/0    00:00:00 bash
   7106 pts/0    00:00:00 cat
   7134 pts/0    00:00:00 cat
  33298 pts/0    00:00:00 ps	

15. who

Print information about users who are currently logged in.
student@student:~$ who
student  tty2         2023-07-20 20:19 (tty2)

16. uname

It shows the system information
student@student:~$ uname 
Linux
It shows additional kernel information or version details.
student@student:~$ uname -r
5.19.0-42-generic
It shows the hostname of the machine
student@student:~$ uname -n
student

17. pwd

It prints the path of current working directory
student@student:~$ pwd
/home/student

18. man

This command is used to show the manual pages of commands




19. ln

* Hard Link
This command is to create hard links between files. Changes to either the original file or the hard link are reflected in both. Hard Links have actual file contents
student@student:~$ cat xyz.txt > file1.txt
student@student:~$ ln file1.txt file2.txt
student@student:~$ cat file2.txt
A "Hello, World!" program is generally a computer program that ignores any input, and outputs or displays a message similar to "Hello, World!".
Hello World provides coliving, student housing, coworking, social spaces and natural habitats to those exploring the evolution of humanity through positive
It's a quick way to get a peek at what working in a coding language will be like and whether you'd enjoy the syntax

* Soft Link
This command is to create soft links between files. Symbolic links are separate files that point to the path of the source file.
student@student:~$ ln -s file1.txt f2.txt
student@student:~$ cat f2.txt
A "Hello, World!" program is generally a computer program that ignores any input, and outputs or displays a message similar to "Hello, World!".
Hello World provides coliving, student housing, coworking, social spaces and natural habitats to those exploring the evolution of humanity through positive
It's a quick way to get a peek at what working in a coding language will be like and whether you'd enjoy the syntax

20. Sort

This command in to sort lines of text in a file.
student@student:~$ sort fruits.txt
apple
banana
grape
orange

21. cut

This command used to extract specific sections or columns from lines of text or files.

student@student:~$ cat test.txt
Name	Class	Dept
Pranav	TIA	IT
Mohak	TIB	IT
Abhay 	TIA	IT

This command used to extract specific characters from lines of text or files based on character positions.
student@student:~$ cut -c 2-3 test.txt
am
ra
oh
bh

This command used to extract specific fields  from text or files
student@student:~$ cut -f 1 test.txt
Name
Pranav
Mohak
Abhay

22. head

This command is used to print the first part of files. By default it shows first ten lines of file. -n is used to specify to print number of lines in upper part of file.
student@student:~$ head -n 2 xyz.txt
A "Hello, World!" program is generally a computer program that ignores any input, and outputs or displays a message similar to "Hello, World!".
Hello World provides coliving, student housing, coworking, social spaces and natural habitats to those exploring the evolution of humanity through positive

23. tail

This command is used to print the last part of files. By default it shows last ten lines of file. -n is used to specify to print number of lines in lower part of file.
student@student:~$ tail -n 1 xyz.txt
It's a quick way to get a peek at what working in a coding language will be like and whether you'd enjoy the syntax

24. unique
* uniq
It displays only the unique lines from the file.
student@student:~$ uniq fruits.txt
apple
banana
apple
orange
banana
grape

* uniq -d
It displays only the duplicate lines from the file
student@student:~$ uniq -d fruits.txt
apple
banana
grape

* uniq -u
It displays only the unique lines from the file
student@student:~$ uniq -u fruits.txt
orange

* uniq -c
It displays the unique lines from the file along with a count
student@student:~$ uniq -c fruits.txt
      1 apple
      1 banana
      1 apple
      1 orange
      1 banana
      2 grape

25. grep

This command is used in pattern matching 
student@student:~$ cat cars 
Ford		Mustang 
Toyota		Supra 
Hyundai 	Verna 
Honda 		Civic 
Nissan 		GTR 
Plymouth	GTX 
Chevrolet	Camaro 
Dodge		Challenger
student@student:~$ grep Toyota cars 
Toyota	Supra 

* grep -i
This command will ignore upper/lower case while matching 
student@student:~$ grep -i toyota cars 
Toyota		Supra 

* grep -v 
This command will show all content except mentioned in cmd 
student@student:~$ grep -v toyota cars 
Ford		Mustang 
Toyota		Supra 
Hyundai	Verna 
Honda		Civic
Nissan		GTR 
Plymouth	GTX 
Chevrolet	Camaro 
Dodge		Challenger

26. tr

This command is used to translate or delete characters. This command will change case of the content 'a-z'->'A-Z' or 'A-Z'->'a-z'
student@student:~$ cat abc.txt | tr 'a-z' 'A-Z'
A "HELLO, WORLD!" PROGRAM IS GENERALLY A COMPUTER PROGRAM THAT IGNORES ANY INPUT, AND OUTPUTS OR DISPLAYS A MESSAGE SIMILAR TO "HELLO, WORLD!".
27. cd
This command is used to change the directory to the specified path
pranav@LAPTOP-TB69H925:~$ cd OS
pranav@LAPTOP-TB69H925:~ /OS $

cd ..
This command is used to change the current working directory to its parent directory
pranav@LAPTOP-TB69H925:~/OS$ cd ..
pranav@LAPTOP-TB69H925:~$

28. sed
* Search & Replace Line

pranav@LAPTOP-TB69H925:~/OS$ cat addbook.txt
anish   	t21055  pune    	1234567890
pranav  t21032  jarud   	9021206946
deep    	t21029  jalgaon 	78425945846
mohak  t21001  nashik  	96259348659
aditya  	t21036  aura    	2356478236

This command will search and replace the pattern in file
pranav@LAPTOP-TB69H925:~/OS$ sed 's/jarud/pune/' addbook.txt
anish     t21055  pune    	1234567890
pranav  	t21032  jarud  	9021206946
deep    	t21029  jalgaon 78425945846
mohak  t21001  nashik  	96259348659
aditya  	t21036  aura    	2356478236

This command will search and replace the pattern in file permanently
pranav@LAPTOP-TB69H925:~/OS$ sed -i 's/jarud/pune/' addbook.txt
pranav@LAPTOP-TB69H925:~/OS$ cat addbook.txt
anish   	t21055  pune    1234567890
pranav  t21032  pune    	9021206946
deep    	t21029  jalgaon 78425945846
mohak   t21001  nashik  96259348659
aditya 	 t21036  aura    	2356478236

This command will search and replace the pattern in file permanently in second line
pranav@LAPTOP-TB69H925:~/OS$ sed '2 s/pune/jarud/' addbook.txt
anish   	t21055  pune    1234567890
pranav  t21032  jarud   	9021206946
deep    	t21029  jalgaon 78425945846
mohak   t21001  nashik  96259348659
aditya  	t21036  aura    	2356478236



This command will search and replace the pattern in file for first occurrence
pranav@LAPTOP-TB69H925:~/OS$ sed 's/pune/aund/1' addbook.txt
anish   	t21055  pune    	1234567890
pranav  t21032  aund    	9021206946
deep    	t21029  jalgaon 78425945846
mohak   t21001  nashik  96259348659
aditya  	t21036  aura    	2356478236

* Delete Line

This command will delete first line in file
pranav@LAPTOP-TB69H925:~/OS$ sed '1d' addbook.txt
pranav  t21032  pune    9021206946
deep    t21029  jalgaon 78425945846
mohak   t21001  nashik  96259348659
aditya  t21036  aura    2356478236

This command will delete line in range 3,4 in file
pranav@LAPTOP-TB69H925:~/OS$ sed -i '3,4d' addbook.txt
pranav@LAPTOP-TB69H925:~/OS$ cat addbook.txt
anish   t21055  pune    1234567890
pranav  t21032  pune    9021206946
aditya  t21036  aura    2356478236

This command will delete last line in file
pranav@LAPTOP-TB69H925:~/OS$ sed -i '$d' addbook.txt
pranav@LAPTOP-TB69H925:~/OS$ cat addbook.txt
anish   t21055  pune    1234567890
pranav  t21032  pune    9021206946

This command will delete search pattern line in file
pranav@LAPTOP-TB69H925:~/OS$ sed -i '/anish/d' addbook.txt
pranav@LAPTOP-TB69H925:~/OS$ cat addbook.txt
pranav  t21032  pune    9021206946














1. Fibonacci Series

echo "Enter Series Count"
read count
num1=0
num2=1
echo $num1
echo $num2
for((i=2;i<$count;i++))
do
	num3=`expr $num1 + $num2`
	echo $num3
	num1=$num2
	num2=$num3
done

Output:
pranav@LAPTOP-TB69H925:~/OS$ ./fibbo.sh
Enter Series Count
10
0
1
1
2
3
5
8
13
21
34


















2. String palindrome
# !bin/bash

ch=1
while [ $ch -lt 5 ] && [ $ch -gt 0 ]
do
	echo -e "\nEnter the choise \n1.Enter a string \n2.Check the len of string \n3.Check Reverse of string \n4.Check the string is pallindrome or not"
	read ch
	case $ch in
	1)
		read string1
		;;
	2)
		len=${#string1}
		echo -e "The length of string is $len \n"
		;;
	3)
		string2=""
		for((i=len;i>0;i--))
		do
			char=`echo $string1 | cut -c $i`
			string2=$string2$char
		done
		echo -e "The original string is $string1"
		echo -e "The reverse of string is $string2\n"
		;;
	4)
		if [ $string1 == $string2 ]
		then
			echo -e "The $string1 is Pallindrome\n"
		else
			echo -e "The $string1 is NOT Pallindrome\n"
		fi
		;;
	*)
		echo -e "Enter the valid choise\n"
	esac		
done

Output :
pranav@LAPTOP-TB69H925:~/OS$ ./palli.sh

Enter the choise
1.Enter a string
2.Check the len of string
3.Check Reverse of string
4.Check the string is pallindrome or not
1
malayalam

Enter the choise
1.Enter a string
2.Check the len of string
3.Check Reverse of string
4.Check the string is pallindrome or not
2
The length of string is 9


Enter the choise
1.Enter a string
2.Check the len of string
3.Check Reverse of string
4.Check the string is pallindrome or not
3
The original string is malayalam
The reverse of string is malayalam


Enter the choise
1.Enter a string
2.Check the len of string
3.Check Reverse of string
4.Check the string is pallindrome or not
4
The malayalam is Pallindrome
















3. Array Element Sorting

echo -e "\nEnter the number of data to insert in array"
read num

for ((i=0; i<$num; i++))
do
        echo -e "Enter the element at $i"
        read element
        arr[$i]=$element
done

for ((i=0; i<$(expr $num - 1); i++))
do
        for ((j=0; j<$(expr $num - $i - 1); j++))
        do
                if [ "${arr[$j]}" -gt "${arr[$j + 1]}" ]
                then
                        # Swap the elements
                        temp=${arr[$j]}
                        arr[$j]=${arr[$j + 1]}
                        arr[$j + 1]=$temp
                fi
        done
done

echo -e "\nSorted Array:"
echo "${arr[@]}"

echo -e "\nElements in sorted array:"
for ((i=0; i<$num; i++))
do
        echo "${arr[$i]}"
done

Output :
pranav@LAPTOP-TB69H925:~/OS$ ./bubble.sh

Enter the number of data to insert in array
5
Enter the element at 0
32
Enter the element at 1
4
Enter the element at 2
43
Enter the element at 3
-1
Enter the element at 4
10

Sorted Array:
-1 4 10 32 43

Elements in sorted array:
-1
4
10
32
43

